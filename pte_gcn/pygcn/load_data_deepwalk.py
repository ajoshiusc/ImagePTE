import sys
import os
import numpy as np
import random
sys.path.append('/ImagePTE1/ajoshi/code_farm/ImagePTE/src/stats/')

#from surfproc import patch_color_attrib, smooth_surf_function
from brainsync import normalizeData, groupBrainSync, brainSync

#from dfsio import readdfs, writedfs
from scipy import io as spio
from read_data_utils import load_bfp_data
import pdb
import nilearn.image as ni
from tqdm import tqdm
from sklearn.svm import OneClassSVM

##======================
import networkx as nx
from karateclub import DeepWalk
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--dim', type=int, default=64, help='feature dimension generated by deepwalk')
parser.add_argument('--walk_len', type=int, default=160, help='walk length')
parser.add_argument('--win_size', type=int, default=5, help='window size')
parser.add_argument('--walk_n', type=int, default=64, help='number of generated random walks')
parser.add_argument('--atlas', type=str, default="Brain", help='name of atlas to use.')
args = parser.parse_args()


def deepwalk(conn):
    edge_list = []
    for i in range(conn.shape[0]):
        for j in range(conn.shape[1]):
            edge_list.append((i, j, conn[i][j]))
        
    G = nx.Graph()
    G.add_weighted_edges_from(edge_list)
    print(len(G))
    
    # train model and generate embedding
    # walk_length=100, dimensions=64, window_size=5
    model = DeepWalk(walk_number=args.walk_n, walk_length=args.walk_len, dimensions=args.dim, window_size=args.win_size)
    model.fit(G)
    embedding = model.get_embedding()

    return embedding


def get_connectivity(data, labels, label_ids): # compute adj matrix
    if type(data) == str:
        df = spio.loadmat(data)
        data = df['dtseries'].T

    num_time = data.shape[0]

    num_rois = len(label_ids)

    rtseries = np.zeros((num_time, num_rois)) # 171x16/ 95 /158

    for i, id in enumerate(label_ids):

        idx = labels == id
        rtseries[:, i] = np.mean(data[:, idx], axis=1)

    rtseries, _, _ = normalizeData(rtseries) 

    conn = abs(np.corrcoef(rtseries.T))

    conn[~np.isfinite(conn)] = 0  # define the infinite value edges as no connection

    ##===================Added===========================##
    for i in range(conn.shape[0]):
        conn[i, i] = 1.0
        for j in range(conn.shape[1]):
            conn[i, j] = conn[j, i]
    ##================##
    ## the adjacency matrix here is not binary. we use the correlation coefficient directly.
    #print(conn.shape, rtseries.T.shape)
    return conn, rtseries.T # 16x171, ROI/Node. 16*16 for conn


def load_all_data(studydir, epi_txt, test_epi_txt, nonepi_txt, test_nonepi_txt, atlas_labels):

    atlas = spio.loadmat(atlas_labels)

    gord_labels = atlas['labels'].squeeze()

    label_ids = np.unique(gord_labels)  # unique label ids

    # remove WM label from connectivity analysis
    label_ids = np.setdiff1d(label_ids, (2000, 0))

    with open(epi_txt) as f:
        epiIds = f.readlines()

    with open(nonepi_txt) as f:
        nonepiIds = f.readlines()

    epiIds = list(map(lambda x: x.strip(), epiIds))
    nonepiIds = list(map(lambda x: x.strip(), nonepiIds))
    # random.shuffle(epiIds)
    # random.shuffle(nonepiIds)
    # print(len(epiIds), epiIds)
    epi_files = list()
    nonepi_files = list()

    for sub in epiIds:
        fname = os.path.join(studydir, sub, 'BFP', sub, 'func',
                             sub + '_rest_bold.32k.GOrd.mat')
        if os.path.isfile(fname):
            epi_files.append(fname)

    for sub in nonepiIds:
        fname = os.path.join(studydir, sub, 'BFP', sub, 'func',
                             sub + '_rest_bold.32k.GOrd.mat')
        if os.path.isfile(fname):
            nonepi_files.append(fname)

    epi_data = load_bfp_data(epi_files, 171)
    nonepi_data = load_bfp_data(nonepi_files, 171)

    # nsub = epi_data.shape[2]
    #==============================================================
    nsub = min(epi_data.shape[2], nonepi_data.shape[2])
    epiIds = epiIds[:nsub]
    nonepiIds = nonepiIds[:nsub]
    #===============================================================

    conn_mat = np.zeros((nsub, len(label_ids), len(label_ids)))
    cent_mat = np.zeros((nsub, len(label_ids)))
    input_feat = np.zeros((nsub, len(label_ids), epi_data.shape[0]))
    dw_feat = np.zeros((nsub, len(label_ids), args.dim))
    print(conn_mat.shape, input_feat.shape)
    print(epi_data.shape, nonepi_data.shape, gord_labels.shape)

    _, ref_sub = get_connectivity(nonepi_data[:, :, 0],
                            labels=gord_labels,
                            label_ids=label_ids)


    for subno in range(nsub): # num of subjects
        conn_mat[subno, :, :], time_series = get_connectivity(epi_data[:, :, subno],
                                                 labels=gord_labels,
                                                 label_ids=label_ids)

        #G = nx.convert_matrix.from_numpy_array(np.abs(conn_mat[subno, :, :]))
        #cent = nx.eigenvector_centrality(G, weight='weight')
        #cent_mat[subno, :] = np.array(list(cent.items()))[:,1]
        # print(ref_sub.shape, time_series.shape)
        # dw_feat[subno, :, :] = deepwalk(conn_mat[subno, :, :])
        
        input_feat[subno, :, :] = np.transpose(brainSync(ref_sub.T, time_series.T)[0])
    
    # setting 1: walk_length=120, dimensions=64, window_size=20
    # setting 2 lobes: walk_length=15, dimensions=DW_DIM, window_size=5
    # setting lobes: walk_length=10, dimensions=DW_DIM, window_size=3
    fname = str(args.walk_n) + str(args.walk_len) + str(args.win_size)
    np.savez('/home/wenhuicu/ImagePTE-1/PTE_conn_f100.npz',
             conn_mat=conn_mat,
             deepwalk=dw_feat,
             features=input_feat, # 36x16x171
             label_ids=label_ids,
             cent_mat=cent_mat)
##============================================================================
    print("non_epi")
    # nsub = nonepi_data.shape[2]

    conn_mat = np.zeros((nsub, len(label_ids), len(label_ids)))
    cent_mat = np.zeros((nsub, len(label_ids)))
    input_feat = np.zeros((nsub, len(label_ids), nonepi_data.shape[0]))
    dw_feat = np.zeros((nsub, len(label_ids), args.dim))
    print(conn_mat.shape, input_feat.shape, dw_feat.shape)
    # here we are using same number of training subjects for epi and nonepi.
    for subno in range(nsub):
        conn_mat[subno, :, :], time_series = get_connectivity(nonepi_data[:, :, subno],
                                                 labels=gord_labels,
                                                 label_ids=label_ids)
        # dw_feat[subno, :, :] = deepwalk(conn_mat[subno, :, :])
        
        #G = nx.convert_matrix.from_numpy_array(np.abs(conn_mat[subno, :, :]))
        #cent = nx.eigenvector_centrality(G, weight='weight')
       # cent_mat[subno, :] = np.array(list(cent.items()))[:,1]
        input_feat[subno, :, :] = np.transpose(brainSync(ref_sub.T, time_series.T)[0])

    # setting 1: walk_length=120, dimensions=64, window_size=20
    # setting 2 lobes: walk_length=15, dimensions=64, window_size=5
    # setting lobes: walk_length=10, dimensions=64, window_size=3
    np.savez('/home/wenhuicu/ImagePTE-1/NONPTE_conn_f100.npz',
             conn_mat=conn_mat, # n_subjects*16*16
             deepwalk=dw_feat,
             features=input_feat, # n_subjects * 16 x 171
             label_ids=label_ids,
             cent_mat=cent_mat)

    print('done')


if __name__ == "__main__":

    studydir = '/ImagePTE1/ajoshi/fitbir/preproc/maryland_rao_v1'

    # epi_txt = '/ImagePTE1/ajoshi/fitbir/preproc/maryland_rao_v1_epilepsy.txt'
    test_epi_txt = '/ImagePTE1/ajoshi/fitbir/preproc/maryland_rao_v1_epilepsy_test.txt'
    # nonepi_txt = '/ImagePTE1/ajoshi/fitbir/preproc/maryland_rao_v1_nonepilepsy_imgs.txt'
    test_nonepi_txt = '/ImagePTE1/ajoshi/fitbir/preproc/maryland_rao_v1_nonepilepsy_test.txt'
    epi_txt = '/ImagePTE1/ajoshi/fitbir/preproc/maryland_rao_v1_epilepsy_imgs.txt'
    nonepi_txt = '/ImagePTE1/ajoshi/fitbir/preproc/maryland_rao_v1_nonepilepsy_imgs_37.txt'
    
    # atlas_labels = '/ImagePTE1/ajoshi/code_farm/bfp/supp_data/USCLobes_grayordinate_labels.mat'
    if args.atlas == 'Brain':
        atlas_labels = '/ImagePTE1/ajoshi/code_farm/bfp/supp_data/USCBrain_grayordinate_labels.mat'
    if args.atlas == 'Lobes':
        atlas_labels = '/ImagePTE1/ajoshi/code_farm/bfp/supp_data/USCLobes_grayordinate_labels.mat'
    if args.atlas == 'f100':
        atlas_labels = '/home/wenhuicu/atlases/functional/500sub_33n_deepwalk_32k_T7_L100R100_sigma0.5_nb9alpha0.5_km.mat'

    load_all_data(studydir, epi_txt, test_epi_txt, nonepi_txt, test_nonepi_txt, atlas_labels)
    input('press any key')
